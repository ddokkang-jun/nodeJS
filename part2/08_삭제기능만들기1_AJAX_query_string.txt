삭제기능 만들기 1 (AJAX, query string)

 

1:14 1. 삭제버튼누르면 서버로 요청날리기 

4:08 ajax로 요청날릴 수 있음 

7:44 서버로 데이터날리는 법 몇개 더 있음 (query string, URL parameter)

12:09 오늘의 숙제 해오세요 

 

 

오늘의 숙제 : 

하단 참고

 

 

글 삭제기능도 만들어봅시다.

기능이 어떻게 동작하는지 글로 정리부터 해보면

"글마다 있는 삭제버튼 누르면 DB에 있는 document 삭제하기"가 끝인데 

근데 유저가 직접 DB를 조작하면 위험하니까 중간에 서버를 거치도록 합시다. 

 

1. 글마다 삭제버튼이 있는데 누르면

2. 서버로 이 글 삭제해달라고 요청을 날리고 

3. 서버는 확인 후 DB에 있는 document 삭제 

이러면 될 것 같습니다. 

그리고 이런거 작성할 때 상세할 수록 더 좋은 코드 작성이 가능합니다. 

 

 

 

 

 

 

AJAX 

 

삭제기능은 똑같이 만들면 재미없으니까 좀 다르게 만들어보도록 합시다. 

여러분들 서버로 GET요청 POST요청 날리는 법 배웠죠? 

주소창에 URL 입력하거나 <form>을 전송하거나 하면 됩니다.

근데 그런걸로 요청을 날리면 항상 새로고침이 되는데

새로고침되는게 아니꼬우면 새로고침 없이도 서버에게 요청을 날리고 데이터를 주고받고 그럴 수 있습니다.

AJAX로 요청을 날리면 됩니다. 

 

 

 

 

 

1. 글마다 삭제버튼이 있는데 이거 누르면 

 

삭제버튼은 여기 list.ejs 글목록에다가 만들면 편할거같은데

 

 

(list.ejs)

<div class="white-bg">
  <% for (let i = 0; i < 글목록.length; i++){ %>
    <div class="list-box">
      <h4>
        <a href="/detail/<%= 글목록[i]._id %>">
          <%= 글목록[i].title %>
        </a>
        <a href="/edit/<%= 글목록[i]._id %>">✏️</a>
        <span class="delete">🗑️</span>
      </h4>
      <p>글내용임</p>
    </div>
  <% } %>
</div>


쓰레기통 누르면 삭제되도록 만들어봅시다. 

근데 이 span 태그를 클릭하면 삭제요청이 서버로 전송되어야하는데 

그러려면 <form>과 전송버튼이 필요하겠지만

<form> 전송시 새로고침 되는게 죽도록 싫으면 AJAX라는걸 씁시다. 

쓰려면 자바스크립트 코드를 좀 짜야합니다. 

 

 

 

 

<script>
  document.querySelectorAll('.delete')[0].addEventListener('click', function(){
    fetch()
  })
</script>


list.ejs 하단에 <body>태그 끝나기 전 쯤 이런 코드를 추가해봅시다. 

그냥 정말 기본적인 자바스크립트 문법이구요 

 

- <script> 태그안에 자바스크립트를 적을 수 있습니다. 그럼 페이지 로드시 자동 실행됩니다.

- querySelector로 원하는 html 요소를 찾을 수 있고 addEventListener 쓰면 그걸 클릭시 실행할 코드를 입력할 수 있습니다. 

- fetch() 는 AJAX 요청 날릴 때 쓰는 자바스크립트 기본 함수입니다. 

그래서 지금 뭘 짠거냐면 "delete라는 클래스명을 가진 여러 html 요소 중 0번째를 찾아서 클릭시 fetch() 실행해주쇼" 라고 코드짠 것임

 

 

 

 

 

 

fetch( ) 사용법 

 

fetch() 를 쓰면 서버로 GET, POST, PUT, DELETE 요청을 할 수 있는데

새로고침 없이 몰래 할 수 있습니다. 이걸 AJAX라고 부릅니다. 

새로고침 없이 서버랑 데이터를 주고받으면 더 이쁜고 부드러운 감성가득한 사이트가 되지 않을까요. 

 

 

 

fetch('/URL~~')

사용법 잠깐 알아보자면 fetch('/URL') 적으면 이 URL로 GET요청이 날라갑니다. 에구쉬워 

 

 

 

fetch('/URL~~', {
  method : 'POST',
  headers : { 'Content-Type' : 'application/json' },
  body : JSON.stringify({a : 1})
})

POST요청하고싶으면 뒤에다가 중괄호 열고 설정들을 집어넣을 수 있는데 

- method 에는 원하는 method 넣으면 되고 

- headers 는 부가정보 기입란인데 저렇게 작성해야 array, object 데이터를 서버로 잘 전송할 수 있습니다. 

- body 안에는 서버로 전송할 array, object 데이터를 집어넣으면 됩니다.

근데 array, object 를 그냥 넣으면 깨지기 때문에 JSON.stringify() 를 써서 문자형태로 (JSON형태로) 바꿔서 전송해야 잘 갑니다.

 

진짜 POST 요청이 잘 가는지 확인하고 싶으면 

fetch() 잘 작성해서 한 번 실행시켜보십시오. 

그리고 서버에서 요청.body 한 번 출력해보면 되겠습니다. 

참고로 요청.body가 잘 안나오면 서버파일 상단에 app.use(express.json()) 이런게 없어서 그럴 수도 있음 

 

 

Q. 전 자바스크립트 코드 실행 어떻게 하는지 몰라요 

- 방금 만든 addEventListener 안에 적으면 0번째 삭제버튼 누를 때 실행됩니다. 

 

 

 

 

 

 

 

서버로 데이터 전송하는 여러가지 방법

 

AJAX 배운 기념으로 서버로 데이터 전송하는 법 몇 개만 더 알아봅시다.

서버로 데이터 보내고 싶으면 폼태그 쓰거나

아니면 AJAX 쓰는 경우 body : 뒤에 데이터 적어두면 전송되는데

가끔 DELETE요청시 body : 를 넣으면 잘 안되는 경우도 있고

아니면 너무 짧고 하찮아서 굳이 body : 에 적기 귀찮은 경우도 있습니다.

 

그럴 때 서버로 데이터 전송할 수 있는 방법이 한 2개 정도 더 있는데 query string 이랑 URL parameter를 이용하는겁니다.

 

 

 

 

 

 

URL 파라미터로 서버에 데이터 전송하기

 

URL 파라미터는 써봤으니까 짧게 합시다. 

예를 들어 유저가 서버에게 내 이름을 전송하고 싶은 겁니다.

 

app.get('/abc/:name') 


그럴 때 서버는 이렇게 URL 파라미터를 이용해서 API를 만들어두면 

유저는 /abc/어쩌구 이런 URL로 GET요청 보낼 수 있겠죠?

근데 어쩌구 자리에 내 이름을 집어넣어서 /abc/홍길동 이렇게 요청보내는 겁니다.

그럼 서버는 요청.params 출력해보면 '홍길동'이 들어있기 때문에 이거 써도 유저가 서버로 데이터를 전송할 수 있는 겁니다.

 

 

 

 

 

 

query string으로 서버에 데이터 전송하기

 

아니면 서버에 URL 파라미터같은거 셋팅해놓기 귀찮은 경우 쿼리스트링이라는 것도 사용가능합니다. 

쿼리스트링은 서버에 아무 셋팅해놓을 필요 없고 

그냥 아무 API로 GET, POST, PUT, DELETE 요청할 때 

 

 

fetch('/abc?데이터이름=데이터값') 


?데이터이름=데이터값

이런 식으로 데이터를 적는겁니다. 

그럼 신기하게 서버로 갑니다. 

 

 

fetch('/abc?데이터이름=데이터값&데이터이름2=데이터값2') 


하나 더 전송하고 싶으면 & 기호로 연결하면 됩니다. 

서버에서 이걸 꺼내고 싶으면 요청.query 출력해보시면 아마 들어있습니다. 

필요할 때 쓰도록 합시다.

 

 

 

URL 파라미터 / query string 의 장점은

둘 다 아무 API로 GET, POST, PUT, DELETE 요청할 때 전부 쓸 수 있다는게 장점이고 

단점은 URL에 정보가 노출된다는 겁니다. 

그래서 짧고 안중요한 데이터 전송하는데 쓰는게 좋습니다. 

 

필요한건 다 알려드렸으니 삭제기능도 다음시간까지 최대한 직접 한번 만들어봅시다.

“삭제버튼누르고 새로고침했을 때 그 글이 안보이면” 성공입니다.

 

 

 

 

 

 

오늘의 숙제 : 

삭제기능을 완성해옵시다.

삭제버튼 누르면 해당 글이 DB에서 삭제되면 끝입니다. 

AJAX를 써보는게 어떨까요. 

 

(팁) 혼자 코드짤 때 팁을 하나 드리자면 한 번에 모든 삭제버튼과 기능을 만들려고 하지 마시고 

한 번에 하나의 기능만 만들어보고 그걸 확장해나가는 식으로 코드짜는게 좋습니다.

첫 글만 삭제하는 기능만 우선 만들어보고 

그 다음엔 둘째글 삭제하는 기능 만들어보고

뭔가 코드가 중복되는거 같다면 축약할 수 있는건 축약하고 그러면 쉽습니다. 