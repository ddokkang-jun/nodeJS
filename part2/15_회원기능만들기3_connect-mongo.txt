회원기능 만들기 3 (가입기능, connect-mongo)

 

0:00 가입기능 만들기

3:22 비번 암호화 (해싱)

10:12 세션을 DB에 저장하려면

 

 

 

 

가입기능 만들기 

 

가입기능 심심하면 만들어보랬던 것 같은데

그냥 유저가 폼에서 아이디/비번 전송하면 DB에 저장해주는게 가입기능 끝 같습니다.

전 어떻게 해놨냐면 

 

app.get('/register', (요청, 응답)=>{
  응답.render('register.ejs')
})


저는 누가 /register 페이지로 방문하면 register.ejs 파일 보내라고 했습니다. 

 

 <form class="form-box" action="/register" method="POST">
    <h4>가입</h4>
    <input name="username">
    <input name="password" type="password">
    <button type="submit">전송</button>
</form> 


register.ejs 내용은 login.ejs 랑 똑같이 해놨습니다.

 

 

app.post('/register', async (요청, 응답) => {
  await db.collection('user').insertOne({
    username : 요청.body.username,
    password : 요청.body.password
  })
  응답.redirect('/')
})


폼 전송 누르면 DB에 아이디/비번을 저장하라고 코드짰습니다. 

- 같은 username이 이미 있으면?

- username이 빈칸이면? 

- 비번이 너무 짧으면?

이런 예외사항도 여러분들이 if문으로 잘 처리해보도록 합시다. 

 

 

 

 

 

hashing

 

근데 가입시킬 때 지금은 비번을 DB에 그대로 저장하고 있는데 

비번은 암호화해서 저장하는게 좋습니다.

그래야 DB가 털려도 원래 비번은 알 수 없으니까요.

실은 암호화라기보다는 해싱인데 해싱이 뭐냐면 어떤 문자를 다른 랜덤한 문자로 바꾸는걸 해싱이라고 합니다.

SHA3-256, SHA3-512, bcrypt, scrypt, argon2 이런 여러가지 해싱 알고리즘들이 있습니다. 

 

예를 들어 hello 이런 문자를 SHA3-256 알고리즘으로 해싱하면 

3338be694f50c5f338814986cdf0686453a888b84f424d792af4b9202398f392

이런 문자가 됩니다. 

해싱된 문자보고 원래 문자를 유추할 수 없습니다.

그래서 비번같은거 보관할 때 해싱해서 저장하는게 안전합니다.

참고로 나중에 유저가 로그인시 제출한 비번을 DB와 비교하고 싶으면

제출한 비번을 또 해싱해보면 DB와 비교가능합니다. 

 

아무튼 우리는 bcrypt라는 해싱 알고리즘을 써볼건데 이거 쓰기쉽게 도와주는 라이브러리를 설치해봅시다. 

 

 

npm install bcrypt

1. 터미널 열어서 npm install bcrypt 하고 

 

 

const bcrypt = require('bcrypt') 

2. 이런 코드를 상단에 추가하면 셋팅 끝입니다. 

 

 

await bcrypt.hash(해싱할문자, 10) 

3. 그럼 이제 이런 코드를 사용하면 어떤 문자를 해싱해서 그 자리에 퉤 뱉어줍니다. 

뒤에 넣는 숫자는 얼마나 꼬아줄지를 결정해줍니다.

값이 15 이렇게 높아질수록 해싱에 1초 이렇게 걸리는데

그러면 해커도 해시값을 때려맞추려면 매우 긴 시간이 걸리기 때문에

해킹을 포기하게 만드는 지연장치입니다. 

하지만 하나 해싱하는데 1초 그렇게 걸리면 서버도 부담될 수 있기 때문에 적절히 10정도 넣으면 0.1초 미만으로 해싱해줍니다. 

 

 



 

그래서 해시결과를 테스트삼아 출력해보면 대충 이렇게 생겼습니다.

근데 정확히말하면 오른쪽 쯤에 있는게 해시값이고

왼쪽에 있는건 salt라고 부릅니다. 

해싱할 때 얘가 자동으로 salt라는것도 넣어주는데 그게 뭐냐면 

 

 

 

 

 

salt 추가하면 더 안전함

 

비번을 해싱할 때 그냥 비번만 달랑 해싱하는게 아니라

뒤에 랜덤문자를 몰래 이어붙여서 해싱하면 좀 더 안전하지않을까요? 

실제로 그렇습니다. 그 랜덤문자를 salt라고 부릅니다.

그래서 bcrypt 라이브러리 쓰면 자동으로 salt 넣어서 해싱해줍니다. 

 

정확히 말하면 salt를 쓰면 해커들이 lookup table attack, rainbow table attack이 어려워진다는 장점이 있어서 쓰는 것인데

이것들이 뭐냐면 해커들이 해시를 보고 원래 비번을 쉽게 추론할 수 있게 만든 표 같은 것입니다. 

 

 



 

▲ 이런 비번을 해싱하면 5d93ceb~ 이런게 나온다는 정보가 100억개 적혀진 표입니다. 

 

그런데 비번을 저장할 때 salt라는 랜덤문자를 더해서 해시해버리면

해커가 기존에 만들어놓은 표를 아예 못쓰고 새로 만들어야 하기 때문에 (salt를 넣어서 해싱한 표를 새로 만들어야하기 때문에)

그렇게 해킹을 좀 어렵게 만드는 것에 의의가 있다고 보면 됩니다.

 

그래서 salt를 패스워드 옆에 함께 보관해두는데

salt를 다른 별도의 DB나 하드웨어에 보관하는 곳들도 있습니다.

그렇게 보관하는 salt들을 pepper라고 부르는데 거기까지는 귀찮으니까 안할거고요 

아무튼 결론을 해시해서 비번을 저장하면 됩니다. 

 

 

 

 

 

app.post('/register', async (요청, 응답) => {
  let 해시 = await bcrypt.hash(요청.body.password, 10) 
  await db.collection('user').insertOne({
    username : 요청.body.username,
    password : 해시
  })
  응답.redirect('/')
})


아이디/비번 DB에 저장할 때 해싱해서 저장하라고 코드를 짜봤습니다. 

DB에 해시값으로 비번이 잘 저장되나 확인해봅시다.

 

 

 

 

passport.use(new LocalStrategy(async (입력한아이디, 입력한비번, cb) => {
  let result = await db.collection('user').findOne({ username : 입력한아이디})
  if (!result) {
    return cb(null, false, { message: '아이디 DB에 없음' })
  }

  if (await bcrypt.compare(입력한비번, result.password)) {
    return cb(null, result)
  } else {
    return cb(null, false, { message: '비번불일치' });
  }
})) 


근데 해시값으로 비번을 저장하면

new LocalStrategy 어쩌구 같은 코드에서 비번을 비교할 때도 해싱해서 비교해야합니다.

해시값을 비교하고 싶으면 await bcrypt.compare 가져다가 쓰면 되겠습니다. 

그래서 비교 결과가 맞으면 true 같은걸 그 자리에 뱉어줄겁니다. 

 

 

 

 

 

세션을 DB에 저장하려면 connect-mongo

 

유저가 로그인하면 세션 document를 하나 만들어준다고 했는데

실은 DB에 발행되는게 아니라 컴퓨터 메모리에 임시저장되고 있어서 

서버가 재시작되거나 그러면 세션 document들이 증발합니다.

그게 싫고 안정적으로 쓰고 싶으면 세션을 mongodb에 저장합시다. 

connect-mongo라는 라이브러리 설치하면 됩니다.

다른 데이터베이스 쓰고 싶은 사람들은 connect-어쩌구 이름의 다른 라이브러리 찾아보면 되겠습니다. 

 

 

npm install connect-mongo 

터미널 열어서 이런거 설치하고

 

 

const MongoStore = require('connect-mongo')

app.use(session({
  resave : false,
  saveUninitialized : false,
  secret: '세션 암호화 비번~~',
  cookie : {maxAge : 1000 * 60},
  store: MongoStore.create({
    mongoUrl : '님들 DB접속용 URL~~',
    dbName: 'forum',
  })
})) 


require('connect-mongo') 하고 

app.use(session()) 안에 store: 라는 항목 추가하면 됩니다. 

 

그럼 이제 DB에 접속해서 forum이라는 데이터베이스 안에 sessions라는 컬렉션을 만들어서

거기에 세션을 알아서 보관해줄겁니다.

유효기간 지나면 자동으로 삭제도 알아서 해줍니다. 

진짜 되는지 확인하고 싶으면 로그인하고 나서 MongoDB 들어가봅시다. 

 

참고로 로그아웃 기능은 안만들어놔서 로그아웃은 그냥 로그인 다시하면 됩니다. 

깔끔하게 해보고 싶으면 그냥 쿠키 삭제하면 로그아웃 될듯요 

세션저장되는 방식과 관련해서 이거저거 셋팅을 더 만지고 싶으면

connect mongo 라이브러리 사용법 찾아보시면 되겠습니다. 

 

 

 

 

 

 

성능 팁

 

비효율적으로 보이는 포인트가 몇개 있어보이는데 

1. deserializeUser는 항상 유저가 서버로 요청을 날릴 때마다 세션용 쿠키가 있으면 실행됩니다.

그럼 모든 요청을 날릴 때 쓸데없는 DB조회가 발생하는 것 아닙니까  

지금 메인페이지 같은 곳에 방문할 땐 굳이 저걸 실행할 필요가 없어보입니다. 

그래서 deserializeUser를 특정 route에서만 실행시키는법 이런거 찾아보시면 약간 더 효율적으로 동작시킬 수 있습니다.

 

2. 근데 그렇게 해도 요청이 너무 많이 들어와서 DB조회가 너무 많이 발생할거같으면 

Redis 같은 가벼운 메모리기반 데이터베이스를 호스팅받아서 쓰는 사람들도 있습니다.

하드디스크 보다 램이 훨씬 빠르니까요.

connect-redis 그런걸 한번 찾아봅시다.

 

3. 유저가 1억명이거나 아니면 백엔드에서 운영중인 마이크로 서비스가 많다면

세션 말고 JWT 쓰는게 편리할 수도 있습니다. 그건 DB조회할 필요가 없으니까요. 

그것도 passport로 구현할 수 있는 예제가 많기 때문에 찾아보면 쉽게 구현가능합니다. 

물론 DB 조회를 안하면 유저를 강제로 로그아웃 시키거나 그런 기능 만드는게 어려울 수 있습니다.

 

 

 

 

 

오늘의 응용사항 :

 

Q1. 회원가입 시켜줄 때 중복아이디로 가입하는걸 막고싶으면?

혼자 코드 못짜는 어린이를 위한 힌트
 

Q2. 유저 비번 입력란을 최소 2개로 만들어서 2개가 일치해야 가입시켜주려면? 

어린이를 위한 힌트
 

Q3. 로그인 한 사람만 글작성가능하게 만들고 싶으면?

어린이
 

답은 하나가 아니라 잘되면 다 정답입니다. 