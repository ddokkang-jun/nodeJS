삭제기능 만들기 3 (AJAX 추가 내용)

 

0:00 ajax사용시 서버가 보낸 데이터 출력가능 

2:21 ajax를 잘 쓰면 client side rendering 가능 

4:37 ajax요청 예외처리는 

7:40 삭제시 UI 애니메이션을 추가해보자 

 

 

 

 

AJAX 추가내용

 

AJAX 추가 문법들을 더 알아보고 지나갑시다. 

AJAX 성공시 서버가 보낸 데이터같은것도 출력해볼 수 있습니다.

지금 삭제요청 완료하면 서버에서 메세지같은거 유저에게 보내주고 있을텐데 그거 한번 출력해보도록 합시다.

 

 

fetch('/URL').then((r)=>r.json())
.then((result)=>{ console.log(result) }) //서버에서 array, object보내는 경우

fetch('/URL').then((r)=>r.text())
.then((result)=>{ console.log(result) }) //서버에서 문자보내는 경우


fetch 만든 사람이 then 2번 붙이라는군요.  

정확히말하면 자바스크립트에서 좀 늦게처리되는 함수들이 있는데

그런거 작업이 완료되었을 때 코드를 실행하고 싶으면 뒤에 .then 붙이거나 await 붙이거나 해야합니다. 

진짠지 출력해보면 되는데 html 파일에 적은 console.log는 크롬개발자도구에서 확인가능합니다. 

 

 

 

그래서 AJAX 잘 쓰면 새로고침 없이도 서버에서 새로운 데이터를 가져올 수 있다보니까 

AJAX 잘 쓰면 재밌는 기능을 많이 만들수 있습니다.

예를 들어서 지금 글제목 누르면 상세페이지 html을 받아오는게 아니라

1. 상세페이지에 필요한 글의 제목과 내용만 AJAX로 새로고침 없이 받아오고 

2. 그리고 그 받아온걸로 이쁘게 html을 만들어서 유저에게 보여주는겁니다. 

이러면 어떻게 되겠습니까. 

클릭하면 이제 새로고침없이도 상세내용을 보여줄 수 있으니까

좀 더 이쁘고 부드럽게 동작하는 사이트를 만들 수 있지 않을까요 ? 

 

 

 

렌더링 방법 

 

여기서 알수있는게

유저에게 html 페이지를 보여줄 수 있는 방법이 2개 있습니다. 

 

첫째는 우리가 지금까지 계속 했던것처럼 서버에서 html을 만들어서 보내주는 것이고

이걸 서버사이드렌더링이라고 합니다. 

둘째는 서버에서 데이터만 AJAX로 가져와서 프론트엔드에서 자바스크립트로 html을 막 생성해주는겁니다.

이걸 클라이언트사이드 렌더링이라고 합니다.

 

원래 근본은 서버사이드렌더링인데 단점이 새로고침이 된다는거라 

새로고침없이 좀 부드럽게 새로운 html을 보여주고 싶으면 클라이언트사이드 렌더링을 선택하면 되는겁니다.

 

아니면 페이지 일부만 클라이언트사이드 렌더링해도 상관없고 

아니면 아예 처음부터 모든걸 클라이언트사이드 렌더링하고 싶으면 React같은 라이브러리 쓰면 편리할 수 있습니다. 

요즘 사람들은 React 안쓰면 개발 못하는 줄 알고 있는데

클라이언트사이드 렌더링하는 부드러운 사이트 만들고 싶을 때 쓰면 됩니다. 

 

 

 

 

 

AJAX 에러처리 

 

서버가 다운되었거나 인터넷이 끊겼거나 

서버가 이상한 에러코드를 보내거나 그런 경우 AJAX가 실패할 수 있는데 

그럴 때 코드를 실행하고 싶으면 

 

 

fetch('/URL')
.then((r)=>{
  if(r.status == 200) {
    return r.json()
  } else {
    //서버가 에러코드전송시 실행할코드
  }
})
.then((result)=>{ 
  //성공시 실행할코드
}).catch((error)=>{
  //인터넷문제 등으로 실패시 실행할코드
  console.log(error)
})


이렇게 길게 코드짜면 됩니다. 

진짜인지 확인하고 싶으면 서버에서 status code를 200말고 다른거 한번 보내봅시다. 

 

근데 fetch 기본 문법이 코드가 매우 긴 편이라 불편한데 

그래서 AJAX 많이 쓰면 외부 라이브러리 설치해서 쓰는 분들이 많습니다.

axios 같은거 설치하면 더 짧게 쓸 수 있는데 

 

 

 

 

 

 

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script> 

axios 라이브러리 js 설치파일같은거 구글에서 찾아와서 html 파일에 붙여넣어두면

 

 

 

axios.get('/URL').then((r)=>{ console.log(r) })


이렇게 GET요청 날리고 결과 출력도 가능합니다. 

then 2번쓰고 지랄할 필요없음 

서버에서 에러메세지같은거 보내거나 실패하는 경우는 .catch(()=>{  })  붙여서 에러체크도 가능합니다. 

 

 

 

 

 

 

간단한 애니메이션

 

지금보면 삭제버튼 누르면 DB에서 삭제는 잘 됩니다.

Q. 근데 굳이 새로고침까지 해야 글이 사라지는데 왜 그렇죠? 

 

이런 현상을 이해하고 싶으면 '프로그래밍 대 원칙' 하나가 있습니다.

뭔가 의도대로 동작하지 않으면 그건 컴퓨터 문제가 아니라 95% 확률로 여러분들이 코드를 안짜거나 못짠겁니다.

 

지금도 잘 생각해보시면 버튼누르면 DB에 있던 document 삭제요청하는 코드만 작성해놨죠? 

그래서 삭제누른다고 html 부분이 자동으로 사라지고 그런 기능은 없습니다. 

html도 자동으로 사라져야한다는건 여러분의 희망사항일 뿐이고

컴퓨터는 여러분 명령대로만 움직이지 얘가 알아서 뭘 자동으로 해주고 그런거 없습니다. 

 

 

삭제버튼눌러서 삭제완료되면 

- 새로고침을 강제로 하거나 

- 현재 버튼이 속해있는 글의 html을 안보이게 처리하라고 코드를 짜면 될 것 같군요. 

새로고침은 싫으니까 저는 그냥 html만 안보이게 처리만 해보겠습니다. 

 

 

 

document.querySelectorAll('.delete')[0].addEventListener('click', function(e){
  fetch('/delete?docid=' + e.target.dataset.id, {
    method : 'DELETE',
  })
  .then((r)=>r.text())
  .then((r)=>{
    e.target.parentElement.parentElement.style.display = ‘none’
  })
}) 

삭제요청 성공시 

"지금 누른 버튼의 부모의 부모 html을 찾아서 display : none을 주세요"

라고 코드짜봤습니다. 

 

부모의 부모를 안보이게 해야되는걸 어떻게 알았냐고요? 

불확실하면 실험해보면 되는거죠 뭐 

삭제버튼 누르고 한 번 잘 없어지나 시도해봅시다.

 

 

 

삭제기능 만들면서 새로 배운거 정리해보자면 

1. 새로고침없이 서버로 요청날리고 싶으면 AJAX 사용 

2. AJAX로 데이터도 가져올 수 있다보니까 클라이언트사이드 렌더링이라는것도 가능하구요 

3. dataset 문법 이용하면 html에 몰래 데이터 숨겨놓을 수도 있습니다. 