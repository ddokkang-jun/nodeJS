글 작성기능 만들기 2 (insertOne, 예외 처리)

 

0:00 3. 서버는 DB에 글 저장 

4:22 예외상황 대처는 if

8:08 에러상황 대처는 try/catch

 

 

저번시간에 글작성기능을 만들기 시작했는데

1. 유저가 글작성페이지에서 글을 서버로 글을 보내고 

2. 서버는 글을 받으면 잘썼나 확인해보고 

3. 서버는 그걸 DB에 저장

3번을 마저 해보도록 합시다. 

 

 

 

 

DB에 document 하나 만들려면

 

await db.collection('post').insertOne(저장할데이터) 


어떤 데이터를 DB에 저장하고 싶으면 이런 코드 작성하면 됩니다.

어떻게 알았냐고요? 검색해봤습니다. 

이러면 post라는 컬렉션에 새로운 document를 하나 만들어서 이 데이터를 안에 기록해줍니다.

데이터는 object자료형식으로 집어넣으면 됩니다. 

 

 

 

await db.collection('post').insertOne({ a : 1 }) 


예를 들어 이렇게 작성하고 실행하면 


 

▲ mongodb 사이트가서 확인해보면 

이런 식으로 document 하나가 생성되고 a : 1 이 그대로 저장되어있습니다.

(_id는 자동발행됩니다)

아무튼 테스트 삼아 해본거니까 삭제하고 

 

그럼 .insertOne() 안에 유저가 작성한 글을 넣으면 저장이 잘 될거같은데

이거 .insertOne(요청.body) 그대로 막 이렇게 넣습니까?

정확히 어떤 형식으로 집어넣어야됩니까?

 

 



▲ 지금 DB를 보면 글들이 이런 식으로 저장되어있습니다. 

이 document들과 유사하게 저장하는게 좋을 것 같기 때문에 

{title : 어쩌구, content : 어쩌구}

이런 식으로 저장하는게 좋겠죠? 

 

 

 

app.post('/add', async (요청, 응답) => {
  await db.collection('post').insertOne({ title : 요청.body.title, content : 요청.body.content })
  응답.send('작성완료')
})


그래서 이렇게 저장하라고 했습니다.

실은 요청.body 출력해보면 {title : 어쩌구, content : 어쩌구} 이거랑 똑같이 나오기 때문에 

요청.body를 그대로 .insertOne()에 넣어도 될거같긴 한데

근데 그럴 경우 유저가 이상한 데이터를 보내버리면 그걸 그대로 document에 작성해버리기 때문에 위험할 수도 있을 것 같군요. 

 

그래서 아무튼 저장하고 테스트해보면 

이제 전송버튼누르면 글이 DB에 저장됩니다. 성공 

 

 

 

app.post('/add', async (요청, 응답) => {
  await db.collection('post').insertOne({ title : 요청.body.title, content : 요청.body.content })
  응답.redirect('/list')
})



응답.send()로 메세지 보내는게 싫으면

응답.redirect() 이런거 써도 됩니다. 그러면 다른 페이지로 강제로 이동시켜줍니다. 

 

 

 

 

 

 

예외처리하는 법

 

유저가 제목을 안적고 글을 전송하면 어쩔 것입니까.

한번 테스트로 글 전송 해보면 요청.body.title 부분이 ' ' 이렇게 비어있군요.

이 경우엔 DB에 저장시키면 안될 것 같군요.

그러고 싶으면 "제목이 비어있으면 DB저장하지말기~" 이거 그대로 코드로 번역하면 되는 것일 뿐입니다. 

 

 

app.post('/add', async (요청, 응답) => {
  if (요청.body.title == '') {
    응답.send('제목안적었는데')
  } else {
    await db.collection('post').insertOne({ title : 요청.body.title, content : 요청.body.content })
    응답.redirect('/list') 
  }
  
})


특정조건에 만족하는 경우에 어떤 코드를 실행하고 싶을 때는 if문 쓰면 됩니다.

그럼 내용도 빈칸인지 검사하고 싶으면 어떻게 할까요?

제목이 100자 이상으로 너무 길면 어쩌죠? 

이런 것들도 전부 알아서 if 문으로 처리하면 되겠습니다. 

 

참고로 하나하나 if문 쓰기 귀찮으면 validation 라이브러리를 설치해서 쓰는 사람도 있습니다.

express-validator, vinejs, validator 이런 것들이 있습니다. 

 

 

 

 

DB에 뭔가 저장할 때 몇개의 에러가 발생할 수 있습니다. 

- DB가 다운되어서 통신이 안되거나 

- DB에 뭔가 저장하려는데 _id가 똑같은게 있어서 에러가 나거나 

그런 경우 에러같은게 발생합니다.

에러가 나는 경우에 특정 코드를 실행하고 싶으면 try catch 문법을 쓰면 됩니다.

 

 

try {
   await db.collection('post').insertOne(어쩌구)
} catch (e) {
   console.log(e)
   응답.send('DB에러남')
} 


이건 try 안에 있는 코드가 뭔가 에러나면 catch 안에있는 코드를 대신 실행해주는 유용한 문법입니다. 

catch 안에서 e라는 파라미터 출력해보면 에러 원인 같은 것도 알 수 있습니다. 

그래서 이런 try, catch 문법도 추가해주면 더 안전하고 뛰어난 서버코드를 작성할 수 있으니까

집가서 코드를 업그레이드 해옵시다. 

 

 

 

 

배운거 정리하자면 : 

1. 코드혼자 잘짜고 싶으면 한글로 기능이 어떻게 동작하는지 설명부터하고 그걸 코드로 번역

2. <form>태그쓰면 서버로 POST요청할 수 있고 유저가 입력한데이터도 전송할 수 있음 

3. 서버에서 요청.body쓰면 유저가 폼에 입력한 데이터출력해볼 수 있음 

4. DB에 데이터저장하려면 .insertOne()

5. 그리고 예외처리는 if문이나 try, catch 

 

 

 

심심해서 연습한번 해보고 싶으면 

다른 페이지와 <form> 하나 만들어서

전송버튼누르면 새로운 collection에 글 발행해주는 기능 한번 만들어봅시다. 