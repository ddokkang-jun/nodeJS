상세페이지 만들기 1 (URL parameter)

 

0:00 작동방식을 모르겠으면 다른 사이트 베낍니다 

1:25 URL 파라미터 문법 

6:00 상세페이지 만들기 

 

 

오늘의 숙제 : 

하단참고

 

 

 

게시판의 경우에 글제목 누르면 상세페이지 같은걸로 이동하지 않습니까 

그래서 우리도 글마다 상세페이지를 만들어봅시다.

한글로 기능설명부터하면 되는데

근데 내가 그 기능이 어떻게 돌아가는지 몰라서 한글로 설명도 못하겠으면  

다른 사이트의 상세페이지 기능은 어떻게 돌아가고 있는지 살펴보면 됩니다. 

 

 

 



 

네이버 Vibe라는 음악감상하는 사이트인데 

곡을 누르면 곡마다 상세페이지가 있습니다.  

근데 URL 주목해보시면 

 

/track/곡번호 

 

이렇게 접속하면 거기에 맞는 곡의 상세페이지를 보여주는 식으로 만들어놨군요. 

여기말고도 다른 서비스의 상세페이지들도 다 비슷하게 동작할걸요.

그래서 우리도 요 시스템을 카피해보도록 합시다.

 

누가 /detail/글번호로 접속하면 그 글번호를 가진 글의 상세페이지를 보여줍시다. 

자 지금 DB에 글이 3개 있는데 그럼 상세페이지는 몇개 필요하죠?

3개 필요합니다.

그럼 여러분이 직접 ejs파일도 3개 만들고 app.get() 3번써가지고 각각 상세페이지들을 만들면 될 것 같습니다. 

 

예를 들면

유저가 /detail/1 로 접속하면 _id가 1인 글의 상세페이지 보여주기

유저가 /detail/2 로 접속하면 _id가 2인 글의 상세페이지 보여주기 

...

실제로는 _id가 정수가 아니라 ObjectId 형태라 좀 길긴 하겠지만 아무튼 그럽시다.

 






URL 파라미터 문법

 

근데 문제가 있는데 만약에 글이 100개 있으면 어쩔겁니까?

app.get( ) 100개 만들거에요? 

실은 그래도 되는데 그게 싫으면 방법이 하나 있습니다. 

URL 파라미터 문법을 이용하면 비슷한 URL을 가진 API를 여러개 만들 필요가 없습니다. 

 

 

app.get('/detail/:aaaa', (요청, 응답) => {
  응답.send('detail.ejs')
})


URL 입력란에 :어쩌구 이런 식으로 URL을 작성할 수가 있는데 

이게 뭔 뜻이냐면 "이 자리에 유저가 아무 문자나 입력하면~" 이라는 뜻입니다.

그래서 이제 누가 /detail/아무문자 로 접속하면 이 안에 있는 코드가 실행됩니다.

이러면 아까처럼 API 100개 만들필요가 없으니 비슷한 URL의 API가 여러개 필요하면 가져다가 쓰도록 합시다. 

 

 

그래서 detail.ejs 페이지도 하나 만들어서 보내주면 될거같은데 

Q. 이러면 계속 같은 페이지만 보여줄 수 있는거 아님?

그럴 수 있습니다.

지금 유저가 /detail/1 로 접속해도 detail.ejs 보내주고

지금 유저가 /detail/2 로 접속해도 detail.ejs 보내주기 때문에 이러면 안될 것 같은데

실은 ejs 파일로 여러분이 맘대로 데이터를 전송할 수 있기 때문에

매번 똑같은 페이지만 보일 걱정은 안해도 될 것 같습니다.




 

 

detail.ejs 파일 만들기



상세페이지로 쓸 detail.ejs 파일도 하나 만들어봅시다. 



detail.ejs 레이아웃
 


기존 ejs 페이지 복사해서 필요한 곳만 고칩시다. 

<div class="detail-bg">
    <h4>글제목임</h4>
    <p>글내용임</p>
</div> 
 

.detail-bg {
  background: white;
  padding: 15px;
  margin-top: 10px;
}
 

그럼 만들고 싶은 기능을 한글로 정리부터 해보면 

1. 누가 /detail/어쩌구로 접속하면

2. _id가 어쩌구인 글을 DB에서 찾아와서 

3. ejs에 글을 박아서 유저에게 보냄

 

이러면 될 것 같은데 1번은 아까 해본 거 같고  

2번부터 해봅시다. 

 

누가 /detail/abc 라고 입력해서 접속하면 

_id가 abc인 글을 찾아오면 될거같은데

DB에서 _id가 abc인걸 찾고싶으면 어떻게 하냐고요? 

 

 

 

DB에서 특정 document 1개 찾기

 

await db.collection().findOne({a : 1}) 

이렇게 쓰면 이 자리에 a : 1이라는걸 가지고 있는 document를 하나 찾아서 출력해준다는군요. 

a : 1을 가진게 많으면 그 중에 맨 위에 있는 document 한개만 출력해줍니다. 

 

근데 지금 a : 1 기입된 document 찾고싶은게 아니라

우리는 { _id : 어쩌구 } 인 document를 찾고싶은데 이거 잘 되나 한번 테스트해봅시다.

 
 

▲ 대충 이런 document를 _id로 찾고싶으면 코드를 어떻게 짜야할까요? 

 

 

await db.collection('post').findOne({_id : new ObjectId('64bfde3b02d2932a4c06ffba')}) 


이렇게 작성하면 이 자리에 document를 출력해줄 것 같습니다. 진짠지 변수에 저장해서 출력해봅시다. 

new는 왜 붙였냐면 mongodb 만든 사람이 그렇게 쓰래요.




근데 실은 서버파일에서 ObjectId() 를 쓰려면 셋팅 하나가 필요합니다. 


const { ObjectId } = require('mongodb') 


서버파일 상단 쯤에 위에 이거 집어넣어놔야 하단에서 ObjectId()를 쓸 수 있습니다. 

 
 

 

유저가 URL 입력한거 가져오기 

 

1. 누가 /detail/어쩌구로 접속하면

2. _id가 어쩌구인 글을 DB에서 찾아와서 

3. ejs에 글을 박아서 유저에게 보냄

 

이제 이거 코드로 번역하면 되는데 

일단 유저가 /detail/어쩌구 로 접속하면

{ _id : 어쩌구 } 를 가지고 있는 document를 찾아야합니다. 

그니까 { _id : 유저가URL 파라미터에입력한거 } 이런 document를 찾아와야합니다. 

"유저가 URL 파라미터에 입력한거" 이건 어떻게 알 수 있냐고요? 

 

 

 

 

app.get('/detail/:aaaa', (요청, 응답) => {
  console.log(요청.params)
})


요청.params라고 출력해보면 유저가 URL 파라미터 자리에 입력한 데이터가 출력됩니다.

아마 object 자료형으로 출력될걸요 

 

그럼 배울건 다 배웠으니 1, 2, 3번 기능을 구현해서 상세페이지 기능을 다음시간까지 완성해옵시다. 

 

 

 

 

 

오늘의 숙제 : 

상세페이지 기능을 완성해옵시다.

유저가 /detail/ 뒤에 글_id 를 입력해서 GET요청을 날리면

detail.ejs 페이지를 보여주는데 글제목과 내용이 페이지에 박혀있어야합니다. 