회원기능 만들기 2

 

0:00 serializeUser (세션만들어줌)

5:05 세션 유효기간 설정가능

6:14 deserializeUser (쿠키분석해줌)

 

 

오늘의 숙제 : 

강의하단 참고

 

 

 

저번 시간에 1. 가입기능 2. 로그인기능 만들었는데 

3. 로그인 성공시 세션 document를 발행해주고

4. 세션 document _id가 담긴 쿠키를 유저에게 보내줘서 입장권으로 쓰게하고 

그러면 완성되겠군요. 

 

 

 

 

세션 만들기

 

로그인 성공시 세션을 만들어주면 되는데 세션이 뭐랬습니까

{ 유저아이디 : 어쩌구, 유효기간 : 저쩌구 }

이런게 적힌 document일 뿐입니다.

 

세션을 만들어주는 코드는 직접 짤 필요없이 

passport.serializeUser() 라는 코드 적어두면

- 유저가 로그인 성공할 때 마다 자동으로 세션이 만들어집니다.

- 그리고 그 세션 document의 _id가 적힌 쿠키를 하나 만들어서 유저에게 보내줄겁니다.

- 센스있게 세션 _id는 암호화해서 전달해줍니다.

다 자동이라 딱히 할게 없음 

 

 

 

passport.serializeUser((user, done) => {
  process.nextTick(() => {
    done(null, { id: user._id, username: user.username })
  })
})

new LocalStrategy 어쩌구 하단에 복사붙여넣기 하면 됩니다. 

요청.login() 이라는 함수가 실행되면 자동으로 동작하는 코드고 위에서 설명한 것 처럼 세션을 알아서 만들어줍니다. 

 

- done() 함수의 둘째 파라미터에 적은 정보는 세션 document에 기록됩니다.

유효기간 이런건 알아서 기록해주기 때문에 유저의 _id 아니면 username 이런걸 적어둡시다. 

user라는 파라미터 출력해보면 DB에 있던 유저정보 꺼내쓸 수 있음 (new LocalStrategy에서 보내줌)

- 근데 정확히 말하면 아직 passport에 DB연결을 안해놨기 때문에 DB말고 컴퓨터 메모리에 세션이 저장됩니다. 

 

 

process.nextTick 이게 뭐임
 
Node.js 환경에서 특정 코드를 비동기적으로 처리하고 싶을 때 쓰는 문법인데

자바스크립트는 원래 일반적인 코드들은 동기적으로 처리 됩니다.

동기적이 뭐냐면 위에서 부터 한 줄 한 줄 실행된다는 뜻인데 

이러면 중간에 처리가 힘겨운 코드를 만나면 다른 밑에 있던 코드들은 실행까지 너무 오랜 시간이 걸립니다. 

이걸 막고 싶으면 비동기처리를 지원하는 스페셜한 코드들을 쓰거나

아니면 저렇게 강제로 process.nextTick 안에 적으면 됩니다. 

그럼 process.nextTick 안에 있는 코드는 처리를 살짝 보류시키고 다른 중요한 작업들이 끝나면 그제서야 실행시켜줍니다. 

 

그래서 세션 만들고 그런걸 비동기식으로 처리해주려고 라이브러리에서 저렇게 쓰라는데 

실은 빼도 별 차이 없어보입니다. 

유사품으로 queueMicrotask 이런 함수도 똑같은 기능을 제공합니다. 
 

 

 

 

세션 유효기간 설정가능

 

아무 설정을 안해놓으면 기본적으로 세션 document 유효기간을 2주로 설정해줍니다.

그니까 한 번 로그인하면 유저가 2주동안 로그인을 유지할 수 있다는 겁니다. 

이게 아니꼬우면 설정을 마음대로 바꿀 수도 있는데 

상단에 app.use(session({ }) 이런 코드를 찾아가봅시다. 

 

 

app.use(session({ 
  secret : '어쩌구',
  resave : false,
  saveUninitialized : false,
  cookie : { maxAge : 60 * 60 * 1000 }
}) 


cookie 항목을 만들어서 ms 단위로 유효기간을 설정가능합니다. 

위처럼 하면 1시간 유지해주는데

1개월 이상으로 길게 유지해주는 사이트들도 많습니다.  

 

 

 

 

 

 

 

실은 deserializeUser도 써놔야 잘됩니다

 

그럼 이제 유저가 뭔가 서버로 요청할 때 마다 

쿠키가 서버로 자동으로 전송됩니다. 

서버는 쿠키를 까서 확인해보고 세션 데이터가 진짜 있는지도 조회해서 

유저가 로그인 잘되어있는지 여부를 판단할 수 있는데 

그건 어떻게 하냐면 그냥 deserializeUser라고 코드짜면 끝입니다.

 

 

passport.deserializeUser((user, done) => {
  process.nextTick(() => {
    return done(null, user)
  })
})

passport.serializeUser 밑에 추가합시다. 

이러면 유저가 요청날릴 때 마다 쿠키에 뭐가 있으면 그걸 까서 세션데이터랑 비교해보고 

그래서 별 이상이 없으면 현재 로그인된 유저정보를 모든 API의 요청.user에 담아줍니다.

그래서 이제 API 만들 때 로그인된 유저 정보를 출력하고 싶으면

아무 API에서 요청.user 쓰면 되는 것임

 

로그인 후에 API들에서 요청.user 잘나오나 한 번 아무 API에서 테스트해봅시다. 

로그인된 유저 정보가 잘 나오면 성공입니다.

 

 

 

근데 실은 deserializeUser 안에 이렇게 채워넣으면 문제가 하나 있을 수 있는데

위처럼만 냅두면 이게 세션 document에 적힌 유저정보만 달랑가져오기 때문에

세션데이터가 좀 오래됐거나 그럴 경우엔 최신 유저이름과 좀 다를 수 있습니다.

 

그래서 좋은 관습은

- 세션에 적힌 유저정보를 가져와서

- 최신 회원 정보를 DB에서 가져오고

- 그걸 요청.user에 집어넣는 식으로 코드짜는게 좋습니다. 

 

 

 

passport.deserializeUser((user, done) => {
  let result = await db.collection('user').findOne({_id : new ObjectId(user.id) })
  delete result.password
  process.nextTick(() => {
    return done(null, result)
  })
})

user 파라미터 출력하면 유저 _id 같은게 나오는데 

그걸로 DB를 조회해본 다음 그걸 요청.user 안에 집어넣으라고 코드짰습니다. 

- 참고로 done() 둘째 파라미터에 집어넣은게 자동으로 요청.user 안에 들어갑니다. 

- delete 문법은 object 자료에서 원하는 key를 제거하는 문법입니다. 패스워드는 요청.user 에서 필요없어보여서 지웠음 

 

 

 

 

 

 

나는 쿠키가 궁금한데요 

 

브라우저 개발자도구 Application 탭에 들어가보시면 쿠키 구경이 가능합니다.

 

 



 

로그인 성공시 connect.sid 어쩌구라는 이름으로 이상한 문자열이 쿠키로 저장되는데

이게 세션 document의 _id 같은 것입니다. 

저번 강의에 입력해둔 비번으로 간단한 암호화를 해줬기 때문에 좀 길고 복잡해 보일 뿐입니다.

 

 

그래서 오늘 배운거 정리하자면 

1. 로그인성공시 세션만들어주고 유저 브라우저 쿠키에 저장해주는건 passport.serializeUser()

2. 유저가 쿠키 제출한걸 확인해보는건 passport.deserializeUser() 

3. 현재 로그인된 유저 정보 출력은 API들 안에서 요청.user 

쓰면 됩니다. 

근데 문제는 지금은 세션을 메모리에 저장하고 있어서 서버 재시작시 로그인이 풀려버립니다.

세션을 DB에 저장하는건 다음 시간에 알아봅시다. 

 

 

 

 

오늘의 숙제 :

마이페이지 같은거 하나 만들어옵시다. 

조건 1. 마이페이지는 로그인 한 사람만 방문할 수 있고

조건 2. 마이페이지 레이아웃은 아무렇게나 만드는데 현재 로그인된 유저의 아이디가 어딘가 표기되어있어야합니다. 