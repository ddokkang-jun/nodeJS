상세페이지 만들기 2 (링크 만들기)

 

0:00 /detail/어쩌구 접속시 _id가 어쩌구인 게시물 찾기

1:56 ejs 파일에 게시물 박아넣기

4:05 상세페이지 이동 링크 만들기

8:16 예외상황과 에러상황 처리

 

 

 

저번시간에 상세페이지 열심히 완성해오랬는데 

코드 따라치기만 하면 그냥 따라치기 잘하는 사람이 될 뿐

직접 뭐라도 해보는 시간이 정말 중요합니다. 

 

 

 

 

저번시간 숙제

 

1. 누가 /detail/어쩌구로 접속하면

2. { _id : 어쩌구 } 인 글을 DB에서 찾아와서

3. detail.ejs 파일에 집어넣어서 유저에게 보냄 

이걸 코드로 옮겨보면 

 

 

app.get('/detail/:id', async (요청, 응답) => {
  let result = await db.collection('post').findOne({ _id : new ObjectId(요청.params.id) })
  응답.render('detail.ejs', { result : result })
})


이거 아닐까요 

URL파라미터 사용시 : 콜론기호 뒤엔 자유롭게 작명가능합니다. 

 

 

(detail.ejs)
<div class="detail-bg"> 
  <h4><%= result.title %></h4> 
  <p>글내용임</p> 
</div>


이제 detail.ejs 파일에선 result라고 쓰면 그 document 내용이 잘 출력될 것 같습니다. 

이제 테스트 삼아서 /detail/DB에있던글_id 로 한번 접속해보시길 바랍니다. 

그럼 페이지 내용이 잘 출력되는군요.

 

 

 

 

 

 

링크만들기 

 

그래서 아무튼 이제 /detail/DB에있던글_id 로 접속하면 

그 글의 상세페이지를 보여주고 있는데 의문점이 하나 듭니다. 

유저들이 천재도 아니고 이거 글_id를 주소창에 어떻게 입력하죠?

 

실은 링크라는 좋은게 있습니다.

누르면 자동으로 /detail/DB에있던글_id로 GET요청되는 링크나 버튼 만들어두면 되는거 아닙니까.

그래서 list페이지에 링크들을 만들어보도록 합시다. 

 

 

 

 

 

<a href="/어쩌구">클릭</a>


<a>태그를 쓰면 링크를 만들 수 있고 그거 누르면 /어쩌구라는 URL로 페이지가 이동됩니다. 

 

 

 

 

(list.ejs)

<div class="white-bg">
  <% for (let i = 0; i < 글목록.length; i++){ %>
    <div class="list-box">
      <h4>
        <a href="/detail/<%= 글목록[i]._id %>">
          <%= 글목록[i].title %>
        </a>
      </h4>
      <p>글내용임</p>
    </div>
  <% } %>
</div>


그래서 href=" " 안에 글의 _id를 집어넣어봤습니다.

글의 _id는 글목록이라는 변수 출력해보면 나올텐데

거기서 뽑아서 집어넣어봤습니다. 

 

클릭하면 이동 잘 되나 확인해봅시다. 

참고로 링크들에 밑줄쳐있는게 아니꼬우면 

 a태그에 text-decoration : none 스타일을 줍시다. 

 

 

 

 

 

 

예외상황 처리하기

 

여러분이 어떤 서버기능을 하나 만들었으면

예외상황들에 대처해주는 코드도 넣는게 좋습니다. 

 

예를 들어 유저가 /detail/글_id를 입력하는게 아니라

이상한걸 /detail/바보 라고 입력해서 서버로 요청을 날리면 어떻게 될까요? 

한번 시도해봅시다.

아마 터미널에 에러메세지가 뜰걸요. 

 

 

 

 

app.get('/detail/:id', async (요청, 응답) => {
  try {
    let result = await db.collection('post').findOne({ _id : new ObjectId(요청.params.id) })
    응답.render('detail.ejs', { result : result })
  } catch (){
    응답.send('이상한거 넣지마라')
  }
  
})


그래서 그런 상황을 막고싶으면 예외처리하면 되는데

에러를 막고 싶으면 try catch 안에 넣으면 됩니다. 

 

 

근데 이렇게 해놓으면 잘 될 것 같은데

제가 한번 에러를 회피해보도록 하겠습니다.

에러메세지 잘 읽어보면 ObjectId() 안에 들어갈 문자가 너무 짧다는 에러같은데

그럼 /detail/적절한길이의랜덤문자 로 접속하면 어떻게 될까요? 

 

 

 



 

▲ URL에 24자의 이상한 문자를 기입했더니 이번엔 ejs 파일에서 에러가 났다는군요. 

null에다가 .title을 붙일 수 없다는 소리같습니다. 

그래서 다양한 상황을 직접 테스트해보는게 중요합니다. 

 

이런 상황에서 result 변수같은걸 출력해보면 null이 나오는데 

(null은 텅 비었다는걸 나타내는 자료형입니다)

만약에 db에서 찾은 게시물이 null 이면 메세지 보내라고 if문 같은거 쓰면 될 것 같습니다. 

 

 

 

 

app.get('/detail/:id', async (요청, 응답) => {
  try {
    let result = await db.collection('post').findOne({ _id : new ObjectId(요청.params.id) })
    if (result == null) {
      응답.status(400).send('그런 글 없음')
    } else {
      응답.render('detail.ejs', { result : result })
    }
    
  } catch (){
    응답.send('이상한거 넣지마라')
  }
  
})


if문을 추가해봤습니다. 

그리고 예외상황에선 에러코드같은것도 보내주면

프론트엔드에서 유저가 어떤 문제인지 파악하기 쉬운데 

유저 잘못으로 에러가 났을 경우엔 4XX 같은 코드를 .status() 안에 넣어주면 되고

서버 잘못으로 에러가 났을 경우엔 5XX 같은 코드를 .status() 안에 넣어주면 됩니다.

안한다고 뭐 나쁜건 없는데 프론트엔드에서 서버와 통신할 때 에러원인 찾는게 쉬워집니다.

 

 

https://developer.mozilla.org/en-US/docs/Web/HTTP/Status

더 정확히 하고싶으면 status code 목록같은게 있는데 

이런거 보고 정확히 기재하셔도 좋습니다. 

 

아무튼 결론은 굳이 저 따라안해도 

여러분들이 직접 악성 유저가 되어서 테스트해보면 금방 알 수 있습니다.

 

 

그래서 저번강의 이번강의 배운거 정리하면 

1. URL 파라미터 문법 이용하면 비슷한 URL가진 API 여러개 만들 필요가 없음 

2. db에서 게시물 하나만 찾아오려면 db.collection().findOne({ })

3. 여러분들이 직접 악성유저가 되어서 이거저거 테스트해보고 그걸 다 예외처리하면

더 안정적인 서버기능을 만들 수 있습니다.